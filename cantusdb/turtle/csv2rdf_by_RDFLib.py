from rdflib import Graph, URIRef, Literal
from rdflib.namespace import RDF
import csv
import validators
import sys
import json

# helper to get the predicate relation dictionary
def get_ontology_dict () :
    with open("relations_mapping.json", 'r') as mapper:
        # a specific config file for the predicates
        # TODO: maybe change this part to make a more customized way of getting the predicates configurations
        data = json.load(mapper)
    return data
    
# a main operation function
def convert_csv_to_turtle():
    if len(sys.argv) != 2:
            raise ValueError("Invalid number of input filename") 
        
    with open(sys.argv[1], 'r', encoding='utf-8') as csv_file:
        # TODO: maybe change this one to accomadate for multiple files

        g = Graph()
        
        csv_reader = csv.reader(csv_file)
        ontology_dict = get_ontology_dict()
        
        header = next(csv_reader)

        # Convert each row to Turtle format and add it to the output
        for row in csv_reader:
            # the first column as the subject
            key_attribute = URIRef(row[0])
            if "type" in list(ontology_dict.keys()):
                g.add((key_attribute, RDF.type, URIRef(ontology_dict["type"])))
            
            # extracting other informations
            # TODO: is the source description texts needed?
            for i in range(len(row)):
                # if this key is the first column, skip
                if i == 0:
                    continue
                
                # finding the predicate from csv in the config dictionary, if not exit, skip
                if header[i] in list(ontology_dict.keys()):
                    predicate = URIRef(ontology_dict[header[i]])
                else:
                    continue
                
                # the object might be an URI or a literal
                if validators.url(row[i]):
                    obj = URIRef(row[i])
                else:
                    obj = Literal(row[i])
                
                # add this triple (absolute uri, predicate, object) to the graph
                g.add((key_attribute, predicate, obj))    
                
    return g

# openrefine_csv_test.csv
# is generated by openrefine and used for testing
# Convert the CSV data to Turtle format
if __name__ == "__main__" :
    turtle_data = convert_csv_to_turtle()
    turtle_data.serialize(format="turtle", destination="test.ttl")