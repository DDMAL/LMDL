import pandas as pd
from openai import OpenAI
from SPARQLWrapper import SPARQLWrapper, JSON

client = OpenAI(
    api_key="sk-5SqsJPbpZe9CXH1KD9D225Ae2e444f2e944f28020f1330A5",
    base_url="https://oneapi.xty.app/v1"
)


def callGPT(prompt):
    completion = client.chat.completions.create(
        model="gpt-3.5-turbo-16k",
        max_tokens=500,
        temperature=0.1,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
        ]
    )
    return completion.choices[0].message.content


def query_sparql(endpoint, query, graph_iri):
    sparql = SPARQLWrapper(endpoint)
    sparql.setQuery(query)
    sparql.setReturnFormat(JSON)
    sparql.addDefaultGraph(graph_iri)

    results = sparql.query().convert()
    return results


with open("SimssaDB_context.txt", "r") as f:
    context = f.readlines()
with open("SimssaDB_question_1.txt", 'r') as f:
    question = f.readlines()

context = "".join(context)
question = "".join(question)
prompt = question + "\n" + context

# Generate SPARQL query using GPT
sparql_query_prompt = f"""
Given the following RDF context and question, generate SPARQL query to retrieve the relevant information:

Context:
{context}

Question:
{question}

Please provide only the SPARQL query without any additional text. 
Because it is not querying over the WikiData SPARQL Endpoint, so don't use the "SERVICE" Keyword in SPARQL query generated by you!!!
"""
sparql_query = callGPT(sparql_query_prompt).strip()
#print(sparql_query)
sparql_query = sparql_query.replace("```sparql", "").strip("```")
print(sparql_query)


# Query the SPARQL endpoint
sparql_endpoint = "https://virtuoso.staging.simssa.ca/sparql"
graph_iri = "urn:simssadb"
sparql_results = query_sparql(sparql_endpoint, sparql_query, graph_iri)
#print(type(sparql_results))
print('sparql_results:', sparql_results)


# Process and display the results
def process_results(results):
    bindings = results['results']['bindings']
    processed_results = [{k: v['value'] for k, v in binding.items()} for binding in bindings]
    return pd.DataFrame(processed_results)


df_results = process_results(sparql_results)
print(df_results)

explanation_prompt = f"""
I executed the following SPARQL query on the RDF data:
{sparql_query}
and obtained the following results:
{df_results.to_string(index=False)}

Please explain these results in natural language.
"""
explanation = callGPT(explanation_prompt)
print(explanation)
